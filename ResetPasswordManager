<?php

declare(strict_types=1) ;

namespace Authentication\Application\Managers ;

use Authentication\Domain\Entities\Password;
use Authentication\Domain\Exceptions ;
use DateInterval;
use \DateTime ;

use getenv ;

/**
 * Manage all business rules to 
 * - reset the password
 * 
 * @author haclong
 */
class ResetPasswordManager
{
    public function __construct($tokenReader, $tokenWriter, $sessionContainer, $identityWriter, $identityReader) 
    {
        $this->tokenReader = $tokenReader ;
        $this->tokenWriter = $tokenWriter ;
        $this->sessionContainer = $sessionContainer ;
        $this->identityWriter = $identityWriter ;
        $this->identityReader = $identityReader ;
    }

    public function validateToken($guid)
    {
        // check if token exists in database
        $token = $this->tokenReader->getToken($guid) ;

        // check if expiration date is valid
        if( $token->isExpired() ) {
            throw new Exceptions\TokenHasExpiredException() ;
        }

        // check if session matches
        if( !$token->isSessionTheSame($this->sessionContainer->getManager()->getId())) {
            throw new Exceptions\TokenHasDifferentSessionException() ;
        }

        // check if ip matches
        if( !$token->isIpTheSame(getenv('REMOTE_ADDR'))) {
            throw new Exceptions\TokenHasDifferentIpException() ;
        }

        return true ;
    }

    public function disableToken($token)
    {
        $token = $this->tokenReader->getToken($token) ;
        $date = new DateTime() ;
        $date->sub(new DateInterval('PT1M')) ;

        $token->setExpiration($date) ;

        return $this->tokenWriter->disableTokenByGuid($token) ;
    }
}
